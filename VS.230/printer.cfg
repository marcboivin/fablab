[include dock_macros.cfg]

[respond]

[mcu rpi]
serial: /tmp/klipper_host_mcu

[adxl345]
cs_pin: rpi:None

[resonance_tester]
accel_chip: adxl345
probe_points:
    100,100,20  # an example

[stepper_x]
step_pin: PE11
dir_pin: PE10
enable_pin: !PE9
rotation_distance: 40
microsteps: 16
endstop_pin: ^PB14
position_endstop: 251
position_min: 0
position_max: 251
homing_speed: 100
homing_positive_dir: true


[tmc2209 stepper_x]
uart_pin: PE7
run_current: 0.850
#   The amount of current (in amps) to configure the driver to use
#   during stepper movement. This parameter must be provided.
hold_current: 0.500
hold_current: 0.3
interpolate: True
sense_resistor: 0.110
stealthchop_threshold: 0

[stepper_y]
step_pin: PD8
dir_pin: !PB12
enable_pin: !PD9
rotation_distance: 40
microsteps: 16
endstop_pin: ^PB13
position_endstop: 251
position_min: -25
position_max: 251
homing_speed: 100
homing_positive_dir: true

[tmc2209 stepper_y]
uart_pin: PE15
run_current: 0.850
#   The amount of current (in amps) to configure the driver to use
#   during stepper movement. This parameter must be provided.
hold_current: 0.500
interpolate: True
sense_resistor: 0.110
stealthchop_threshold: 0

[stepper_z]
step_pin: PD14
dir_pin: !PD13
enable_pin: !PD15
endstop_pin: ^PA0
position_max: 253
homing_speed: 100
position_endstop: -2.6
position_min: -2.6
rotation_distance: 40
microsteps: 16

[tmc2209 stepper_z]
uart_pin: PD10
uart_address: 0
run_current: 0.850
#   The amount of current (in amps) to configure the driver to use
#   during stepper movement. This parameter must be provided.
hold_current: 0.500
interpolate: True
stealthchop_threshold: 0

#[safe_z_home]
#home_xy_position: 125,125
#speed: 300
#z_hop: 30              # Move up 10mm
#z_hop_speed: 300

#[homing_override]
#axes: z
#set_position_z: 0
#gcode:
#    G90
#    G0 Z5 F500
#    G28 X0 Y0
#    G0 X125 Y100 F9000
#    G28 Z0
#    G0 Z5 F500

[bed_mesh]
speed: 500
horizontal_move_z: 6
mesh_min: 25,35.0
mesh_max: 225.0,220
probe_count: 8,6
algorithm: bicubic
fade_start: 1
fade_end: 10
fade_target: 0

[probe]
pin: PA3
x_offset: 0.0
y_offset: 34.5
#z_offset: 2.656697
speed: 10
samples_result: median
samples_tolerance: 0.05
samples_tolerance_retries: 2


[extruder]
max_extrude_only_distance: 100.0
step_pin: PD5
dir_pin: !PD6
enable_pin: !PD4
full_steps_per_rotation:400
rotation_distance: 8.005
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PB15
pressure_advance: 0.10
pressure_advance_smooth_time: 0.040
#control = pid
#pid_kp = 18.973
#pid_ki = 0.771
#pid_kd = 116.683
min_temp: 0
max_temp: 270
# PT100 stick!
sensor_type: MAX31865
sensor_pin: PD11 # I pulg into Spider E4-MOT socket, `cs` pin is the sensor pin
spi_speed: 4000000
spi_software_sclk_pin: PE12
spi_software_mosi_pin: PE14
spi_software_miso_pin: PE13
rtd_nominal_r: 100
rtd_reference_r: 430
rtd_num_of_wires: 2
min_extrude_temp:10
microsteps: 16


[tmc2209 extruder]
uart_pin: PD7
interpolate: false
run_current: 0.9
hold_current: 0.5
interpolate: True
sense_resistor: 0.110
stealthchop_threshold: 0


[controller_fan my_controller_fan]
pin: PB2
max_power: 1.00
kick_start_time: 0.200
heater: heater_bed

[heater_bed]
heater_pin: PB4
#control = pid
#pid_kp = 60.695
#pid_ki = 1.073
#pid_kd = 858.069
min_temp: 0
max_temp: 130
# PT100 stick!
sensor_type: MAX31865
sensor_pin: PA15 # I pulg into Spider E4-MOT socket, `cs` pin is the sensor pin
spi_speed: 4000000
spi_software_sclk_pin: PE12
spi_software_mosi_pin: PE14
spi_software_miso_pin: PE13
rtd_nominal_r: 100
rtd_reference_r: 430
rtd_num_of_wires: 2

[fan]
pin: PB1

# thermally controlled hotend fan
[heater_fan my_nozzle_fan]
pin: PB0
max_power: 1.0
kick_start_time: 0.100
heater: extruder
heater_temp: 50.0
fan_speed: 1.0

[mcu]
serial: /dev/ttyAMA0
restart_method: command

[printer]
kinematics: corexz
max_velocity: 1400
max_accel: 1700
max_z_velocity: 1400
max_z_accel: 1400
square_corner_velocity: 3.0

[output_pin LIGHTS]
pin: PC12
value: 0
shutdown_value: 0

# Know temp around steppers
[temperature_sensor my_board]
sensor_type: NTC 100K MGB18-104F39050L32
sensor_pin: PC0
gcode_id: pc0brd

# Know temp somewhere in the chamber
[temperature_sensor my_chamber]
sensor_type: NTC 100K MGB18-104F39050L32
sensor_pin: PC1
gcode_id: pc1chmbr

[display]
#    mini12864 LCD Display
lcd_type: uc1701
cs_pin: PC11
a0_pin: PD2
rst_pin: PC10
encoder_pins: ^PC6,^PC7
click_pin: ^!PA8
contrast: 63
#spi_bus: spi1
spi_software_mosi_pin: PA7
spi_software_miso_pin: PA6
spi_software_sclk_pin: PA5

[virtual_sdcard]
path: /home/pi/sdcard

[gcode_macro lights_on]
gcode:
    SET_PIN PIN=LIGHTS VALUE=1.0

[gcode_macro lights_off]
gcode:
    SET_PIN PIN=LIGHTS VALUE=0.0

[pause_resume]

[screws_tilt_adjust]
# SW Nylock Mod: Screw 1 uses the 6mm metallic spacer so its
# height is considered the baseline. For tilt adjust using the
# command SCREWS_TILT_CALCULATE, this has to be your Screw 1:
#
#         ******************
#         * S7    S8    S9 *
#         *                * 
#   Bed:  * S5    S1    S6 *  
#         *                *
#         * S2    S3    S4 *
#         ******************
#
screw1: 128,110
screw1_name: center
screw2: 18,5
screw2_name: front_left
screw3: 128,5
screw3_name: front_center
screw4: 233,5
screw4_name: front_right
screw5: 18,110
screw5_name: middle_left
screw6: 233,110
screw6_name: middle_right
screw7: 18,215
screw7_name: rear_left
screw8: 128,215
screw8_name: rear_center
screw9: 233,215
screw9_name: rear_right
horizontal_move_z: 10.
speed: 50.
screw_thread: CCW-M3

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro DISABLE_MOTORS]
gcode:
    M18


[display_status]

[delayed_gcode clear_display]
gcode:
  M117

[gcode_macro PRINT_START]
default_parameter_BED: 100 #target bed temperature
default_parameter_EXTRUDER: 240 #target extruder temperature
default_parameter_SOAK:10 #soak time (minutes)
default_parameter_CHAMBER: 40
gcode:
    SAVE_GCODE_STATE NAME=print_start_state
    G90
    {% set BED = params.BED|default(100)|float %}
    {% set EXTRUDER = params.EXTRUDER|default(240)|float %}
    {% set SOAK = params.SOAK|default(10)|float %}
    M117 Starting Warmup

    M140 S{BED}

    #if the bed is already at the correct target temp, we assume no heat soak is necessary.
    {% if (SOAK|int) <= 0 or (printer.heater_bed.temperature >= (BED|int - 20)) %}
        {% if printer.heater_bed.temperature <= (BED|int - 20) %}
            M190 S{BED|int-20}
        {%endif %}
       # M104 S{EXTRUDER|int}
        
    {% else %}
        M117 Heating for Soak
        M190 S{BED}
        M117 Starting Soak
        {% for timer in range( SOAK|int,0,-1) %}
          #we cycle once a minute, so we can send an update to keep octoprint happy, rather than just sleeping for the entire soak
          M117 Soak: {timer|int}m remaining
          M105
          G4 P60000

     {% endfor %}
    {%endif %}    


    M117 Soak Complete
    M118 Soak Complete

     M104 S{EXTRUDER} 
     M118 Doing homeing
     G28
     BED_MESH_CALIBRATE
     G91
     dock_probe
    M109 S{EXTRUDER}
    G1 E3 F300 
        
    M117 Starting Print
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=10
    RESTORE_GCODE_STATE NAME=print_start_state

[gcode_macro PRINT_END]
gcode:
  G91
  G0 Z10 F1000
  G0 E-3 F400
  TURN_OFF_HEATERS
  

[input_shaper]
#shaper_freq_x: 36.9
#shaper_type_x: 2hump_ei
#shaper_freq_y: 21
#shaper_type_y: mzv

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 50.311
#*# pid_ki = 0.718
#*# pid_kd = 881.079
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 22.014
#*# pid_ki = 0.802
#*# pid_kd = 151.069
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  -0.062500, -0.006250, -0.025000, -0.050000, -0.068750, -0.087500, -0.081250, -0.087500
#*# 	  -0.087500, -0.043750, -0.037500, -0.025000, -0.031250, -0.050000, -0.031250, -0.012500
#*# 	  -0.125000, -0.106250, -0.050000, 0.012500, 0.006250, 0.012500, 0.056250, 0.112500
#*# 	  -0.212500, -0.106250, -0.050000, -0.025000, -0.006250, 0.025000, 0.068750, 0.050000
#*# 	  -0.137500, -0.118750, -0.050000, -0.012500, -0.006250, 0.012500, 0.081250, 0.037500
#*# 	  -0.200000, -0.143750, -0.062500, -0.012500, -0.006250, 0.012500, 0.031250, 0.025000
#*# tension = 0.2
#*# min_x = 25.0
#*# algo = bicubic
#*# y_count = 6
#*# mesh_y_pps = 2
#*# min_y = 35.0
#*# x_count = 8
#*# max_y = 220.0
#*# mesh_x_pps = 2
#*# max_x = 224.99
#*#
#*# [input_shaper]
#*# shaper_type_x = 3hump_ei
#*# shaper_freq_x = 50.0
#*# shaper_type_y = zv
#*# shaper_freq_y = 21.0
#*#
#*# [probe]
#*# z_offset = 2.237
